# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import Dict, List, Optional

from fly_machines_sdk.models.create_lease_request import CreateLeaseRequest
from fly_machines_sdk.models.create_machine_request import CreateMachineRequest
from fly_machines_sdk.models.lease import Lease
from fly_machines_sdk.models.machine import Machine
from fly_machines_sdk.models.machine_event import MachineEvent
from fly_machines_sdk.models.machine_exec_request import MachineExecRequest
from fly_machines_sdk.models.machine_version import MachineVersion
from fly_machines_sdk.models.process_stat import ProcessStat
from fly_machines_sdk.models.signal_request import SignalRequest
from fly_machines_sdk.models.stop_request import StopRequest
from fly_machines_sdk.models.update_machine_request import UpdateMachineRequest

from fly_machines_sdk.api_client import ApiClient
from fly_machines_sdk.api_response import ApiResponse
from fly_machines_sdk.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MachinesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def machines_cordon(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> None:  # noqa: E501
        """machines_cordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501

        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_cordon_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_cordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_cordon_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_cordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501

        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_cordon" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/cordon', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_create(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], request : Annotated[CreateMachineRequest, Field(..., description="Create machine request")], **kwargs) -> Machine:  # noqa: E501
        """machines_create  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param request: Create machine request (required)
        :type request: CreateMachineRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Machine
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_create_with_http_info(app_name, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_create_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], request : Annotated[CreateMachineRequest, Field(..., description="Create machine request")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_create  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param request: Create machine request (required)
        :type request: CreateMachineRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Machine, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Machine",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_create_lease(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[CreateLeaseRequest, Field(..., description="Request body")], **kwargs) -> Lease:  # noqa: E501
        """machines_create_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: CreateLeaseRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Lease
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_create_lease_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_create_lease_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_create_lease_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[CreateLeaseRequest, Field(..., description="Request body")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_create_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: CreateLeaseRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Lease, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_create_lease" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Lease",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_delete(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> None:  # noqa: E501
        """machines_delete  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_delete_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_delete_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_delete  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_delete_metadata(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], key : Annotated[StrictStr, Field(..., description="Metadata Key")], **kwargs) -> None:  # noqa: E501
        """machines_delete_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param key: Metadata Key (required)
        :type key: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_delete_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_delete_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_delete_metadata_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], key : Annotated[StrictStr, Field(..., description="Metadata Key")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_delete_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param key: Metadata Key (required)
        :type key: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'key'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_delete_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']

        if _params['key'] is not None:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata/{key}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_exec(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[MachineExecRequest, Field(..., description="Request body")], **kwargs) -> str:  # noqa: E501
        """machines_exec  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: MachineExecRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_exec_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_exec_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_exec_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[MachineExecRequest, Field(..., description="Request body")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_exec  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: MachineExecRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_exec" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/exec', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_list(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], include_deleted : Annotated[Optional[StrictBool], Field(description="Include deleted machines")] = None, region : Annotated[Optional[StrictStr], Field(description="Region filter")] = None, **kwargs) -> List[Machine]:  # noqa: E501
        """machines_list  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param include_deleted: Include deleted machines
        :type include_deleted: bool
        :param region: Region filter
        :type region: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Machine]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_list_with_http_info(app_name, include_deleted, region, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_list_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], include_deleted : Annotated[Optional[StrictBool], Field(description="Include deleted machines")] = None, region : Annotated[Optional[StrictStr], Field(description="Region filter")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """machines_list  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param include_deleted: Include deleted machines
        :type include_deleted: bool
        :param region: Region filter
        :type region: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Machine], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'include_deleted',
            'region'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']


        # process the query parameters
        _query_params = []
        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        if _params.get('region') is not None:  # noqa: E501
            _query_params.append(('region', _params['region']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[Machine]",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_list_events(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> List[MachineEvent]:  # noqa: E501
        """machines_list_events  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[MachineEvent]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_list_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_list_events_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_list_events_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_list_events  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[MachineEvent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[MachineEvent]",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_list_processes(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], sort_by : Annotated[Optional[StrictStr], Field(description="Sort by")] = None, order : Annotated[Optional[StrictStr], Field(description="Order")] = None, **kwargs) -> List[ProcessStat]:  # noqa: E501
        """machines_list_processes  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param sort_by: Sort by
        :type sort_by: str
        :param order: Order
        :type order: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ProcessStat]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_list_processes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_list_processes_with_http_info(app_name, machine_id, sort_by, order, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_list_processes_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], sort_by : Annotated[Optional[StrictStr], Field(description="Sort by")] = None, order : Annotated[Optional[StrictStr], Field(description="Order")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """machines_list_processes  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param sort_by: Sort by
        :type sort_by: str
        :param order: Order
        :type order: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ProcessStat], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'sort_by',
            'order'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_processes" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sort_by', _params['sort_by']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[ProcessStat]",
            '400': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/ps', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_list_versions(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> List[MachineVersion]:  # noqa: E501
        """machines_list_versions  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[MachineVersion]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_list_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_list_versions_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_list_versions_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_list_versions  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[MachineVersion], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_list_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[MachineVersion]",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_release_lease(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> None:  # noqa: E501
        """machines_release_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_release_lease_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_release_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_release_lease_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_release_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_release_lease" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_restart(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], timeout : Annotated[Optional[StrictStr], Field(description="Restart timeout as a Go duration string or number of seconds")] = None, **kwargs) -> None:  # noqa: E501
        """machines_restart  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param timeout: Restart timeout as a Go duration string or number of seconds
        :type timeout: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_restart_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_restart_with_http_info(app_name, machine_id, timeout, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_restart_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], timeout : Annotated[Optional[StrictStr], Field(description="Restart timeout as a Go duration string or number of seconds")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """machines_restart  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param timeout: Restart timeout as a Go duration string or number of seconds
        :type timeout: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'timeout'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_restart" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/restart', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_show(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> Machine:  # noqa: E501
        """machines_show  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Machine
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_show_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_show_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_show_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_show  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Machine, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Machine",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_show_lease(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> Lease:  # noqa: E501
        """machines_show_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Lease
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_show_lease_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_show_lease_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_show_lease_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_show_lease  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Lease, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show_lease" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Lease",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/lease', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_show_metadata(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> Dict[str, str]:  # noqa: E501
        """machines_show_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_show_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_show_metadata_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_show_metadata_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_show_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_show_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Dict[str, str]",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_signal(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[SignalRequest, Field(..., description="Request body")], **kwargs) -> None:  # noqa: E501
        """machines_signal  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: SignalRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_signal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_signal_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_signal_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[SignalRequest, Field(..., description="Request body")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_signal  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: SignalRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_signal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/signal', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_start(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> None:  # noqa: E501
        """machines_start  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_start_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_start_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_start_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_start  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_start" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/start', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_stop(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[Optional[StopRequest], Field(description="Optional request body")] = None, **kwargs) -> None:  # noqa: E501
        """machines_stop  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Optional request body
        :type request: StopRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_stop_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_stop_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_stop_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[Optional[StopRequest], Field(description="Optional request body")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """machines_stop  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Optional request body
        :type request: StopRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_stop" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/stop', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_uncordon(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> None:  # noqa: E501
        """machines_uncordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501

        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_uncordon_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_uncordon_with_http_info(app_name, machine_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_uncordon_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_uncordon  # noqa: E501

        “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.  # noqa: E501

        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_uncordon" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/uncordon', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_update(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[UpdateMachineRequest, Field(..., description="Request body")], **kwargs) -> Machine:  # noqa: E501
        """machines_update  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: UpdateMachineRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Machine
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_update_with_http_info(app_name, machine_id, request, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_update_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], request : Annotated[UpdateMachineRequest, Field(..., description="Request body")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_update  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param request: Request body (required)
        :type request: UpdateMachineRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Machine, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Machine",
            '400': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_update_metadata(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], key : Annotated[StrictStr, Field(..., description="Metadata Key")], **kwargs) -> None:  # noqa: E501
        """machines_update_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param key: Metadata Key (required)
        :type key: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_update_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_update_metadata_with_http_info(app_name, machine_id, key, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_update_metadata_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], key : Annotated[StrictStr, Field(..., description="Metadata Key")], **kwargs) -> ApiResponse:  # noqa: E501
        """machines_update_metadata  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param key: Metadata Key (required)
        :type key: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'key'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_update_metadata" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']

        if _params['key'] is not None:
            _path_params['key'] = _params['key']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/metadata/{key}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def machines_wait(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], instance_id : Annotated[Optional[StrictStr], Field(description="instance? version? TODO")] = None, timeout : Annotated[Optional[StrictInt], Field(description="wait timeout. default 60s")] = None, state : Annotated[Optional[StrictStr], Field(description="desired state")] = None, **kwargs) -> None:  # noqa: E501
        """machines_wait  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param instance_id: instance? version? TODO
        :type instance_id: str
        :param timeout: wait timeout. default 60s
        :type timeout: int
        :param state: desired state
        :type state: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the machines_wait_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.machines_wait_with_http_info(app_name, machine_id, instance_id, timeout, state, **kwargs)  # noqa: E501

    @validate_arguments
    async def machines_wait_with_http_info(self, app_name : Annotated[StrictStr, Field(..., description="Fly App Name")], machine_id : Annotated[StrictStr, Field(..., description="Machine ID")], instance_id : Annotated[Optional[StrictStr], Field(description="instance? version? TODO")] = None, timeout : Annotated[Optional[StrictInt], Field(description="wait timeout. default 60s")] = None, state : Annotated[Optional[StrictStr], Field(description="desired state")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """machines_wait  # noqa: E501


        :param app_name: Fly App Name (required)
        :type app_name: str
        :param machine_id: Machine ID (required)
        :type machine_id: str
        :param instance_id: instance? version? TODO
        :type instance_id: str
        :param timeout: wait timeout. default 60s
        :type timeout: int
        :param state: desired state
        :type state: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'app_name',
            'machine_id',
            'instance_id',
            'timeout',
            'state'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method machines_wait" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['app_name'] is not None:
            _path_params['app_name'] = _params['app_name']

        if _params['machine_id'] is not None:
            _path_params['machine_id'] = _params['machine_id']


        # process the query parameters
        _query_params = []
        if _params.get('instance_id') is not None:  # noqa: E501
            _query_params.append(('instance_id', _params['instance_id']))

        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/apps/{app_name}/machines/{machine_id}/wait', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
