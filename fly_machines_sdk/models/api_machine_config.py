# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from fly_machines_sdk.models.api_dns_config import ApiDNSConfig
from fly_machines_sdk.models.api_file import ApiFile
from fly_machines_sdk.models.api_machine_check import ApiMachineCheck
from fly_machines_sdk.models.api_machine_guest import ApiMachineGuest
from fly_machines_sdk.models.api_machine_init import ApiMachineInit
from fly_machines_sdk.models.api_machine_metrics import ApiMachineMetrics
from fly_machines_sdk.models.api_machine_mount import ApiMachineMount
from fly_machines_sdk.models.api_machine_process import ApiMachineProcess
from fly_machines_sdk.models.api_machine_restart import ApiMachineRestart
from fly_machines_sdk.models.api_machine_service import ApiMachineService
from fly_machines_sdk.models.api_static import ApiStatic
from fly_machines_sdk.models.api_stop_config import ApiStopConfig

class ApiMachineConfig(BaseModel):
    """
    ApiMachineConfig
    """
    auto_destroy: Optional[StrictBool] = None
    checks: Optional[Dict[str, ApiMachineCheck]] = None
    disable_machine_autostart: Optional[StrictBool] = Field(None, description="Deprecated: use Service.Autostart instead")
    dns: Optional[ApiDNSConfig] = None
    env: Optional[Dict[str, StrictStr]] = Field(None, description="Fields managed from fly.toml If you add anything here, ensure appconfig.Config.ToMachine() is updated")
    files: Optional[conlist(ApiFile)] = None
    guest: Optional[ApiMachineGuest] = None
    image: Optional[StrictStr] = Field(None, description="Set by fly deploy or fly machines commands")
    init: Optional[ApiMachineInit] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    metrics: Optional[ApiMachineMetrics] = None
    mounts: Optional[conlist(ApiMachineMount)] = None
    processes: Optional[conlist(ApiMachineProcess)] = None
    restart: Optional[ApiMachineRestart] = None
    schedule: Optional[StrictStr] = Field(None, description="The following fields can only be set or updated by `fly machines run|update` commands \"fly deploy\" must preserve them, if you add anything here, ensure it is propagated on deploys")
    services: Optional[conlist(ApiMachineService)] = None
    size: Optional[StrictStr] = Field(None, description="Deprecated: use Guest instead")
    standbys: Optional[conlist(StrictStr)] = Field(None, description="Standbys enable a machine to be a standby for another. In the event of a hardware failure, the standby machine will be started.")
    statics: Optional[conlist(ApiStatic)] = None
    stop_config: Optional[ApiStopConfig] = None
    __properties = ["auto_destroy", "checks", "disable_machine_autostart", "dns", "env", "files", "guest", "image", "init", "metadata", "metrics", "mounts", "processes", "restart", "schedule", "services", "size", "standbys", "statics", "stop_config"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMachineConfig:
        """Create an instance of ApiMachineConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in checks (dict)
        _field_dict = {}
        if self.checks:
            for _key in self.checks:
                if self.checks[_key]:
                    _field_dict[_key] = self.checks[_key].to_dict()
            _dict['checks'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of dns
        if self.dns:
            _dict['dns'] = self.dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item in self.files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['files'] = _items
        # override the default output from pydantic by calling `to_dict()` of guest
        if self.guest:
            _dict['guest'] = self.guest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of init
        if self.init:
            _dict['init'] = self.init.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mounts (list)
        _items = []
        if self.mounts:
            for _item in self.mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in processes (list)
        _items = []
        if self.processes:
            for _item in self.processes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['processes'] = _items
        # override the default output from pydantic by calling `to_dict()` of restart
        if self.restart:
            _dict['restart'] = self.restart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item in self.services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statics (list)
        _items = []
        if self.statics:
            for _item in self.statics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statics'] = _items
        # override the default output from pydantic by calling `to_dict()` of stop_config
        if self.stop_config:
            _dict['stop_config'] = self.stop_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMachineConfig:
        """Create an instance of ApiMachineConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiMachineConfig.parse_obj(obj)

        _obj = ApiMachineConfig.parse_obj({
            "auto_destroy": obj.get("auto_destroy"),
            "checks": dict(
                (_k, ApiMachineCheck.from_dict(_v))
                for _k, _v in obj.get("checks").items()
            )
            if obj.get("checks") is not None
            else None,
            "disable_machine_autostart": obj.get("disable_machine_autostart"),
            "dns": ApiDNSConfig.from_dict(obj.get("dns")) if obj.get("dns") is not None else None,
            "env": obj.get("env"),
            "files": [ApiFile.from_dict(_item) for _item in obj.get("files")] if obj.get("files") is not None else None,
            "guest": ApiMachineGuest.from_dict(obj.get("guest")) if obj.get("guest") is not None else None,
            "image": obj.get("image"),
            "init": ApiMachineInit.from_dict(obj.get("init")) if obj.get("init") is not None else None,
            "metadata": obj.get("metadata"),
            "metrics": ApiMachineMetrics.from_dict(obj.get("metrics")) if obj.get("metrics") is not None else None,
            "mounts": [ApiMachineMount.from_dict(_item) for _item in obj.get("mounts")] if obj.get("mounts") is not None else None,
            "processes": [ApiMachineProcess.from_dict(_item) for _item in obj.get("processes")] if obj.get("processes") is not None else None,
            "restart": ApiMachineRestart.from_dict(obj.get("restart")) if obj.get("restart") is not None else None,
            "schedule": obj.get("schedule"),
            "services": [ApiMachineService.from_dict(_item) for _item in obj.get("services")] if obj.get("services") is not None else None,
            "size": obj.get("size"),
            "standbys": obj.get("standbys"),
            "statics": [ApiStatic.from_dict(_item) for _item in obj.get("statics")] if obj.get("statics") is not None else None,
            "stop_config": ApiStopConfig.from_dict(obj.get("stop_config")) if obj.get("stop_config") is not None else None
        })
        return _obj


