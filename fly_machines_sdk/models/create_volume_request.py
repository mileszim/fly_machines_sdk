# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from fly_machines_sdk.models.api_machine_guest import ApiMachineGuest

class CreateVolumeRequest(BaseModel):
    """
    CreateVolumeRequest
    """
    compute: Optional[ApiMachineGuest] = None
    encrypted: Optional[StrictBool] = None
    fstype: Optional[StrictStr] = None
    machines_only: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    require_unique_zone: Optional[StrictBool] = None
    size_gb: Optional[StrictInt] = None
    snapshot_id: Optional[StrictStr] = Field(None, description="restore from snapshot")
    snapshot_retention: Optional[StrictInt] = None
    source_volume_id: Optional[StrictStr] = Field(None, description="fork from remote volume")
    __properties = ["compute", "encrypted", "fstype", "machines_only", "name", "region", "require_unique_zone", "size_gb", "snapshot_id", "snapshot_retention", "source_volume_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateVolumeRequest:
        """Create an instance of CreateVolumeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of compute
        if self.compute:
            _dict['compute'] = self.compute.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateVolumeRequest:
        """Create an instance of CreateVolumeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateVolumeRequest.parse_obj(obj)

        _obj = CreateVolumeRequest.parse_obj({
            "compute": ApiMachineGuest.from_dict(obj.get("compute")) if obj.get("compute") is not None else None,
            "encrypted": obj.get("encrypted"),
            "fstype": obj.get("fstype"),
            "machines_only": obj.get("machines_only"),
            "name": obj.get("name"),
            "region": obj.get("region"),
            "require_unique_zone": obj.get("require_unique_zone"),
            "size_gb": obj.get("size_gb"),
            "snapshot_id": obj.get("snapshot_id"),
            "snapshot_retention": obj.get("snapshot_retention"),
            "source_volume_id": obj.get("source_volume_id")
        })
        return _obj


