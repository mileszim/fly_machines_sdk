# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from fly_machines_sdk.models.api_machine_http_header import ApiMachineHTTPHeader

class ApiMachineCheck(BaseModel):
    """
    ApiMachineCheck
    """
    grace_period: Optional[StrictStr] = None
    headers: Optional[conlist(ApiMachineHTTPHeader)] = None
    interval: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    protocol: Optional[StrictStr] = None
    timeout: Optional[StrictStr] = None
    tls_server_name: Optional[StrictStr] = None
    tls_skip_verify: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    __properties = ["grace_period", "headers", "interval", "method", "path", "port", "protocol", "timeout", "tls_server_name", "tls_skip_verify", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMachineCheck:
        """Create an instance of ApiMachineCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item in self.headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMachineCheck:
        """Create an instance of ApiMachineCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiMachineCheck.parse_obj(obj)

        _obj = ApiMachineCheck.parse_obj({
            "grace_period": obj.get("grace_period"),
            "headers": [ApiMachineHTTPHeader.from_dict(_item) for _item in obj.get("headers")] if obj.get("headers") is not None else None,
            "interval": obj.get("interval"),
            "method": obj.get("method"),
            "path": obj.get("path"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "timeout": obj.get("timeout"),
            "tls_server_name": obj.get("tls_server_name"),
            "tls_skip_verify": obj.get("tls_skip_verify"),
            "type": obj.get("type")
        })
        return _obj


