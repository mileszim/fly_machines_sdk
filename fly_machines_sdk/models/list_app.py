# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr

class ListApp(BaseModel):
    """
    ListApp
    """
    id: Optional[StrictStr] = None
    machine_count: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    network: Optional[Dict[str, Any]] = None
    __properties = ["id", "machine_count", "name", "network"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListApp:
        """Create an instance of ListApp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListApp:
        """Create an instance of ListApp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListApp.parse_obj(obj)

        _obj = ListApp.parse_obj({
            "id": obj.get("id"),
            "machine_count": obj.get("machine_count"),
            "name": obj.get("name"),
            "network": obj.get("network")
        })
        return _obj


