# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist

class ApiMachineGuest(BaseModel):
    """
    ApiMachineGuest
    """
    cpu_kind: Optional[StrictStr] = None
    cpus: Optional[StrictInt] = None
    gpu_kind: Optional[StrictStr] = None
    host_dedication_id: Optional[StrictStr] = None
    kernel_args: Optional[conlist(StrictStr)] = None
    memory_mb: Optional[StrictInt] = None
    __properties = ["cpu_kind", "cpus", "gpu_kind", "host_dedication_id", "kernel_args", "memory_mb"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiMachineGuest:
        """Create an instance of ApiMachineGuest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiMachineGuest:
        """Create an instance of ApiMachineGuest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiMachineGuest.parse_obj(obj)

        _obj = ApiMachineGuest.parse_obj({
            "cpu_kind": obj.get("cpu_kind"),
            "cpus": obj.get("cpus"),
            "gpu_kind": obj.get("gpu_kind"),
            "host_dedication_id": obj.get("host_dedication_id"),
            "kernel_args": obj.get("kernel_args"),
            "memory_mb": obj.get("memory_mb")
        })
        return _obj


