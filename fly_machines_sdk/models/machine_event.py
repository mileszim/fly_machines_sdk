# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictInt, StrictStr

class MachineEvent(BaseModel):
    """
    MachineEvent
    """
    id: Optional[StrictStr] = None
    request: Optional[Dict[str, Any]] = None
    source: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    timestamp: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    __properties = ["id", "request", "source", "status", "timestamp", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MachineEvent:
        """Create an instance of MachineEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MachineEvent:
        """Create an instance of MachineEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MachineEvent.parse_obj(obj)

        _obj = MachineEvent.parse_obj({
            "id": obj.get("id"),
            "request": obj.get("request"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type")
        })
        return _obj


