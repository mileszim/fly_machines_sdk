# coding: utf-8

"""
    Fly Machines API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from fly_machines_sdk.models.api_machine_config import ApiMachineConfig  # noqa: E501

class TestApiMachineConfig(unittest.TestCase):
    """ApiMachineConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiMachineConfig:
        """Test ApiMachineConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiMachineConfig`
        """
        model = ApiMachineConfig()  # noqa: E501
        if include_optional:
            return ApiMachineConfig(
                auto_destroy = True,
                checks = {
                    'key' : fly_machines_sdk.models.api/machine_check.api.MachineCheck(
                        grace_period = '', 
                        headers = [
                            fly_machines_sdk.models.api/machine_http_header.api.MachineHTTPHeader(
                                name = '', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        interval = '', 
                        method = '', 
                        path = '', 
                        port = 56, 
                        protocol = '', 
                        timeout = '', 
                        tls_server_name = '', 
                        tls_skip_verify = True, 
                        type = '', )
                    },
                disable_machine_autostart = True,
                dns = fly_machines_sdk.models.api/dns_config.api.DNSConfig(
                    skip_registration = True, ),
                env = {
                    'key' : ''
                    },
                files = [
                    fly_machines_sdk.models.api/file.api.File(
                        guest_path = '', 
                        raw_value = '', 
                        secret_name = '', )
                    ],
                guest = fly_machines_sdk.models.api/machine_guest.api.MachineGuest(
                    cpu_kind = '', 
                    cpus = 56, 
                    gpu_kind = '', 
                    host_dedication_id = '', 
                    kernel_args = [
                        ''
                        ], 
                    memory_mb = 56, ),
                image = '',
                init = fly_machines_sdk.models.api/machine_init.api.MachineInit(
                    cmd = [
                        ''
                        ], 
                    entrypoint = [
                        ''
                        ], 
                    exec = [
                        ''
                        ], 
                    kernel_args = [
                        ''
                        ], 
                    swap_size_mb = 56, 
                    tty = True, ),
                metadata = {
                    'key' : ''
                    },
                metrics = fly_machines_sdk.models.api/machine_metrics.api.MachineMetrics(
                    path = '', 
                    port = 56, ),
                mounts = [
                    fly_machines_sdk.models.api/machine_mount.api.MachineMount(
                        encrypted = True, 
                        name = '', 
                        path = '', 
                        size_gb = 56, 
                        volume = '', )
                    ],
                processes = [
                    fly_machines_sdk.models.api/machine_process.api.MachineProcess(
                        cmd = [
                            ''
                            ], 
                        entrypoint = [
                            ''
                            ], 
                        env = {
                            'key' : ''
                            }, 
                        exec = [
                            ''
                            ], 
                        user = '', )
                    ],
                restart = fly_machines_sdk.models.api/machine_restart.api.MachineRestart(
                    max_retries = 56, 
                    policy = '', ),
                schedule = '',
                services = [
                    fly_machines_sdk.models.api/machine_service.api.MachineService(
                        autostart = True, 
                        autostop = True, 
                        checks = [
                            fly_machines_sdk.models.api/machine_check.api.MachineCheck(
                                grace_period = '', 
                                headers = [
                                    fly_machines_sdk.models.api/machine_http_header.api.MachineHTTPHeader(
                                        name = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                interval = '', 
                                method = '', 
                                path = '', 
                                port = 56, 
                                protocol = '', 
                                timeout = '', 
                                tls_server_name = '', 
                                tls_skip_verify = True, 
                                type = '', )
                            ], 
                        concurrency = fly_machines_sdk.models.api/machine_service_concurrency.api.MachineServiceConcurrency(
                            hard_limit = 56, 
                            soft_limit = 56, 
                            type = '', ), 
                        force_instance_description = '', 
                        force_instance_key = '', 
                        internal_port = 56, 
                        min_machines_running = 56, 
                        ports = [
                            fly_machines_sdk.models.api/machine_port.api.MachinePort(
                                end_port = 56, 
                                force_https = True, 
                                handlers = [
                                    ''
                                    ], 
                                http_options = fly_machines_sdk.models.api/http_options.api.HTTPOptions(
                                    compress = True, 
                                    response = fly_machines_sdk.models.api/http_response_options.api.HTTPResponseOptions(), ), 
                                port = 56, 
                                proxy_proto_options = fly_machines_sdk.models.api/proxy_proto_options.api.ProxyProtoOptions(
                                    version = '', ), 
                                start_port = 56, 
                                tls_options = fly_machines_sdk.models.api/tls_options.api.TLSOptions(
                                    alpn = [
                                        ''
                                        ], 
                                    default_self_signed = True, 
                                    versions = [
                                        ''
                                        ], ), )
                            ], 
                        protocol = '', )
                    ],
                size = '',
                standbys = [
                    ''
                    ],
                statics = [
                    fly_machines_sdk.models.api/static.api.Static(
                        guest_path = '', 
                        url_prefix = '', )
                    ],
                stop_config = fly_machines_sdk.models.api/stop_config.api.StopConfig(
                    signal = '', 
                    timeout = '', )
            )
        else:
            return ApiMachineConfig(
        )
        """

    def testApiMachineConfig(self):
        """Test ApiMachineConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
